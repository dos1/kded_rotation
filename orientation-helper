#!/bin/bash



function toggle {
    loadedmodules=$(qdbus org.kde.kded5 /kded loadedModules)
    if [[ "$loadedmodules" = *kded_rotation* ]]; then
            lock
    else
            unlock
    fi
    exit
}

function lock {
    loadedmodules=$(qdbus org.kde.kded5 /kded loadedModules)
    if [[ "$loadedmodules" = *kded_rotation* ]]; then
            qdbus org.kde.kded5 /kded unloadModule kded_rotation
            qdbus org.kde.plasmashell /org/kde/osdService org.kde.osdService.showText rotation-locked-landscape "Автоповорот экрана выключен"
    fi
    exit
}

function unlock {
    loadedmodules=$(qdbus org.kde.kded5 /kded loadedModules)
    if [[ "$loadedmodules" != *kded_rotation* ]]; then
            qdbus org.kde.kded5 /kded loadModule rotation
            qdbus org.kde.plasmashell /org/kde/osdService org.kde.osdService.showText rotation-allowed "Автоповорот экрана включен"
    fi
    exit
}

function next {
    CURRENT=$(xrandr | grep primary | awk '{print $5}')
    #echo $CURRENT
    case $CURRENT in
    "(normal" )
      ROTATION="right-up"
      ;;
    "right" )
      ROTATION="bottom-up"
      ;;
    "left" )
      ROTATION="normal"
      ;;
    "inverted" )
      ROTATION="left-up"
      ;;
    *)
      ;;
    esac
}

PRIMARY_DISPLAY=$(xrandr | grep primary | awk '{print $1}')

GENERIC_PROP="Coordinate Transformation Matrix"
GENERIC=""

WACOM_PROP="Wacom Rotation"
WACOM=""

function usage {
  echo "KDED Orientation Helper Arguments"
  echo "-o | --output : A display name like eDP-1 (primary display is used by default)"
  echo "-r | --rotation : normal, bottom-up, left-up, right-up"
  echo "-h | --help : Arguments help"
  echo "-t | --togglelock : toggle rotation lock"
  echo "-l | --lock : lock rotation"
  echo "-u | --unlock : unlock rotation"
  exit 1
}

while [ "$1" != "" ]; do
  case $1 in
    -o | --output )           shift
                              PRIMARY_DISPLAY=$1
                              ;;
    -r | --rotation )         shift
                              ROTATION=$1
                              ;;
    -h | --help )
                              usage
                              ;;
    -t | --togglelock )
                              toggle
                              ;;
    -l | --lock )
                              lock
                              ;;
    -u | --unlock )
                              unlock
                              ;;
    -n | --next )
                              next
                              ;;
    * )
                              usage
  esac
  shift
done

if [ -z "$ROTATION" ]; then
  usage
fi

if [ "$ROTATION" == "normal" ]; then
  xrandr --output $PRIMARY_DISPLAY --rotate normal
  GENERIC="1 0 0 0 1 0 0 0 1"
  WACOM="0"
elif [ "$ROTATION" == "bottom-up" ]; then
  xrandr --output $PRIMARY_DISPLAY --rotate inverted
  GENERIC="-1 0 1 0 -1 1 0 0 1"
  WACOM="3"
elif [ "$ROTATION" == "left-up" ]; then
  xrandr --output $PRIMARY_DISPLAY --rotate left
  GENERIC="0 -1 1 1 0 0 0 0 1"
  WACOM="2"
elif [ "$ROTATION" == "right-up" ]; then
  xrandr --output $PRIMARY_DISPLAY --rotate right
  GENERIC="0 1 0 -1 0 1 0 0 1"
  WACOM="1"
fi

for id in $(xinput list --id-only)
do
  props=$(xinput list-props $id)

  # Filter for touch devices
  IS_TOUCH=$(echo $props | grep -i 'Touchscreen\|ELAN\|Pen\|Eraser\|wacom\|maXTouch\|eGalaxTouch\|IPTS')

  # Apply Input Matrix for touch devices
  if [ -n "$IS_TOUCH" ];
    then
      # Detect type of touch
      HAS_WACOM=$(echo "$props" | grep "$WACOM_PROP")
      HAS_GENERIC=$(echo "$props" | grep "$GENERIC_PROP")

      if [ -n "$HAS_WACOM" ]
      then
        xinput set-prop $id "$WACOM_PROP" $WACOM 2>/dev/null
      elif [ -n "$HAS_GENERIC" ]
      then
        xinput set-prop $id "$GENERIC_PROP" $GENERIC 2>/dev/null
      fi
    fi
done
